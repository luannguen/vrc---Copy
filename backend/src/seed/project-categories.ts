import { getPayload } from 'payload';
import config from '@payload-config';

export const seedProjectCategories = async () => {
  try {
    const payload = await getPayload({ config });    // Sample project categories data - s·ª≠ d·ª•ng collection Categories v·ªõi type project_category
    const categories = [
      {
        title: 'ƒêi·ªÅu h√≤a th∆∞∆°ng m·∫°i',
        type: 'project_category' as const,
        slug: 'dieu-hoa-thuong-mai'
      },
      {
        title: 'ƒêi·ªÅu h√≤a c√¥ng nghi·ªáp', 
        type: 'project_category' as const,
        slug: 'dieu-hoa-cong-nghiep'
      },
      {
        title: 'H·ªá th·ªëng ƒë·∫∑c bi·ªát',
        type: 'project_category' as const,
        slug: 'he-thong-dac-biet'
      },
      {
        title: 'Kho l·∫°nh',
        type: 'project_category' as const,
        slug: 'kho-lanh'
      },
      {
        title: 'ƒêi·ªÅu h√≤a d√¢n d·ª•ng',
        type: 'project_category' as const,
        slug: 'dieu-hoa-dan-dung'
      },
      {
        title: 'B·∫£o tr√¨ & S·ª≠a ch·ªØa',
        type: 'project_category' as const,
        slug: 'bao-tri-sua-chua'
      },
    ];

    console.log('ƒêang th√™m d·ªØ li·ªáu m·∫´u cho danh m·ª•c d·ª± √°n...');

    // Th√™m t·ª´ng danh m·ª•c v√†o collection Categories v·ªõi type project_category
    for (const category of categories) {
      const exists = await payload.find({
        collection: 'categories',
        where: {
          and: [
            { title: { equals: category.title } },
            { type: { equals: 'project_category' } }
          ]
        },
      });

      if (exists.docs.length === 0) {
        const newCategory = await payload.create({
          collection: 'categories',
          data: category,
        });
        console.log(`‚úÖ ƒê√£ t·∫°o danh m·ª•c d·ª± √°n: ${newCategory.title}`);
      } else {
        console.log(`‚è≠Ô∏è  Danh m·ª•c d·ª± √°n ƒë√£ t·ªìn t·∫°i: ${category.title}`);
      }
    }    console.log('üéâ Ho√†n th√†nh th√™m d·ªØ li·ªáu m·∫´u cho danh m·ª•c d·ª± √°n!');

  } catch (error) {
    console.error('‚ùå L·ªói khi th√™m d·ªØ li·ªáu m·∫´u danh m·ª•c d·ª± √°n:', error);
    throw error;
  }
};
