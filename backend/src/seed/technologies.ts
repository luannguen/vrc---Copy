import { Payload } from 'payload';

export const seedTechnologies = async (payload: Payload) => {
  try {
    console.log('üîß Seeding technologies...');

    // Check if technologies already exist
    const existingTechnologies = await payload.find({
      collection: 'technologies',
      limit: 1,
    });

    if (existingTechnologies.totalDocs > 0) {
      console.log('‚è≠Ô∏è Technologies already exist, skipping...');
      return;
    }    const technologiesData = [
      {
        name: 'C√¥ng ngh·ªá Inverter',
        description: {
          root: {
            type: 'root',
            children: [
              {
                type: 'paragraph',
                children: [
                  {
                    type: 'text',
                    text: 'Ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng l√™n ƒë·∫øn 40%',
                    version: 1
                  }
                ],
                version: 1
              }
            ],
            direction: 'ltr' as const,
            format: '',
            indent: 0,
            version: 1
          }
        },
        type: 'technology' as const,
        status: 'published' as const,
      },
      {
        name: 'H·ªá th·ªëng VRF',
        description: {
          root: {
            type: 'root',
            children: [
              {
                type: 'paragraph',
                children: [
                  {
                    type: 'text',
                    text: 'Gi·∫£i ph√°p ƒëi·ªÅu h√≤a ƒëa zone hi·ªáu qu·∫£',
                    version: 1
                  }
                ],
                version: 1
              }
            ],
            direction: 'ltr' as const,
            format: '',
            indent: 0,
            version: 1
          }
        },
        type: 'technology' as const,
        status: 'published' as const,
      },
      {
        name: 'Heat Recovery',
        description: {
          root: {
            type: 'root',
            children: [
              {
                type: 'paragraph',
                children: [
                  {
                    type: 'text',
                    text: 'Thu h·ªìi nhi·ªát th·∫£i ƒë·ªÉ t√°i s·ª≠ d·ª•ng',
                    version: 1
                  }
                ],
                version: 1
              }
            ],
            direction: 'ltr' as const,
            format: '',
            indent: 0,
            version: 1
          }
        },
        type: 'technology' as const,
        status: 'published' as const,
      },
    ];

    const createdTechnologies = [];
    for (const tech of technologiesData) {
      const technology = await payload.create({
        collection: 'technologies',
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        data: tech as any, // Type assertion to bypass strict typing for seed data
      });
      createdTechnologies.push(technology);
      console.log(`‚úÖ Created technology: ${tech.name}`);
    }

    console.log(`üîß Technologies seeding completed: ${createdTechnologies.length} technologies created`);
    return createdTechnologies;

  } catch (error) {
    console.error('‚ùå Error seeding technologies:', error);
    throw error;
  }
};
