import { Payload } from 'payload';

// Import our improved media management utilities
import { 
  getImageForCollectionItem,
  getOrCreateDefaultMediaId 
} from './utils/seedMediaManagement';

// Import progress bar manager
import { progressManager } from './utils/progressUtils';

// Simplified richText structure
const createRichText = (text: string) => {
  return {
    root: {
      type: 'root',
      children: [
        {
          type: 'paragraph',
          version: 1,
          children: [
            {
              type: 'text',
              text: text,
              version: 1,
            },
          ],
        },
      ],
      direction: null,
      format: '',
      indent: 0,
      version: 1,
    }
  };
};

export const seedPosts = async (payload: Payload) => {
  console.log('üìù Seeding blog posts...');

  try {
    // Fetch existing posts to avoid duplicates
    const existingPosts = await payload.find({
      collection: 'posts',
      limit: 100,
    });

    // If we already have posts, skip
    if (existingPosts.docs.length > 0) {
      console.log(`Found ${existingPosts.docs.length} existing posts, skipping seed.`);
      return;
    }    // Get or create a default media ID for fallback
    const defaultMediaId = await getOrCreateDefaultMediaId(payload);
    console.log('Default media ID for posts fallback:', defaultMediaId);

    // Sample posts
    const posts = [
      {
        title: "Ti√™u chu·∫©n m·ªõi v·ªÅ hi·ªáu su·∫•t nƒÉng l∆∞·ª£ng cho h·ªá th·ªëng l·∫°nh",
        slug: "tieu-chuan-moi-ve-hieu-suat-nang-luong",
        publishedAt: new Date("2025-05-10").toISOString(),
        status: "published",
        heroImage: defaultMediaId,
        content: createRichText("T·ª´ th√°ng 7/2025, c√°c ti√™u chu·∫©n m·ªõi v·ªÅ hi·ªáu su·∫•t nƒÉng l∆∞·ª£ng cho h·ªá th·ªëng l·∫°nh c√¥ng nghi·ªáp v√† th∆∞∆°ng m·∫°i s·∫Ω ch√≠nh th·ª©c c√≥ hi·ªáu l·ª±c t·∫°i Vi·ªát Nam."),
        meta: {
          title: "Ti√™u chu·∫©n m·ªõi v·ªÅ hi·ªáu su·∫•t nƒÉng l∆∞·ª£ng cho h·ªá th·ªëng l·∫°nh",
          description: "T·ª´ th√°ng 7/2025, c√°c ti√™u chu·∫©n m·ªõi v·ªÅ hi·ªáu su·∫•t nƒÉng l∆∞·ª£ng cho h·ªá th·ªëng l·∫°nh c√¥ng nghi·ªáp v√† th∆∞∆°ng m·∫°i s·∫Ω ch√≠nh th·ª©c c√≥ hi·ªáu l·ª±c t·∫°i Vi·ªát Nam.",
          image: defaultMediaId
        }
      },
      {
        title: "C√¥ng ngh·ªá m·ªõi trong h·ªá th·ªëng l·∫°nh nƒÉm 2025",
        slug: "cong-nghe-moi-trong-he-thong-lanh-2025",
        publishedAt: new Date("2025-04-15").toISOString(),
        status: "published",
        heroImage: defaultMediaId,
        content: createRichText("NƒÉm 2025 ch·ª©ng ki·∫øn nhi·ªÅu b∆∞·ªõc ti·∫øn ƒë√°ng k·ªÉ trong c√¥ng ngh·ªá h·ªá th·ªëng l·∫°nh, t·ª´ vi·ªác c·∫£i ti·∫øn hi·ªáu su·∫•t ƒë·∫øn c√°c gi·∫£i ph√°p th√¥ng minh v√† t·ª± ƒë·ªông h√≥a."),
        meta: {
          title: "C√¥ng ngh·ªá m·ªõi trong h·ªá th·ªëng l·∫°nh nƒÉm 2025",
          description: "NƒÉm 2025 ch·ª©ng ki·∫øn nhi·ªÅu b∆∞·ªõc ti·∫øn ƒë√°ng k·ªÉ trong c√¥ng ngh·ªá h·ªá th·ªëng l·∫°nh, t·ª´ vi·ªác c·∫£i ti·∫øn hi·ªáu su·∫•t ƒë·∫øn c√°c gi·∫£i ph√°p th√¥ng minh v√† t·ª± ƒë·ªông h√≥a.",
          image: defaultMediaId
        }
      },
      {
        title: "VRC ho√†n th√†nh d·ª± √°n l·ªõn t·∫°i khu c√¥ng nghi·ªáp Long Th√†nh",
        slug: "vrc-hoan-thanh-du-an-lon-tai-khu-cong-nghiep-long-thanh",
        publishedAt: new Date("2025-05-01").toISOString(),
        status: "published",
        heroImage: defaultMediaId,
        content: createRichText("VRC v·ª´a ch√≠nh th·ª©c b√†n giao d·ª± √°n h·ªá th·ªëng l·∫°nh c√¥ng nghi·ªáp quy m√¥ l·ªõn cho C√¥ng ty TNHH Ch·∫ø bi·∫øn Th·ª±c ph·∫©m ABC t·∫°i Khu c√¥ng nghi·ªáp Long Th√†nh, ƒê·ªìng Nai."),
        meta: {
          title: "VRC ho√†n th√†nh d·ª± √°n l·ªõn t·∫°i khu c√¥ng nghi·ªáp Long Th√†nh",
          description: "VRC v·ª´a ch√≠nh th·ª©c b√†n giao d·ª± √°n h·ªá th·ªëng l·∫°nh c√¥ng nghi·ªáp quy m√¥ l·ªõn cho C√¥ng ty TNHH Ch·∫ø bi·∫øn Th·ª±c ph·∫©m ABC t·∫°i Khu c√¥ng nghi·ªáp Long Th√†nh, ƒê·ªìng Nai.",
          image: defaultMediaId
        }
      }
    ];    // Create posts
    // Kh·ªüi t·∫°o progress bar cho vi·ªác t·∫°o b√†i vi·∫øt
    progressManager.initProgressBar(posts.length, 'Uploading post images');
    
    for (const post of posts) {
      try {
        // Get appropriate image for this post
        const mediaId = await getImageForCollectionItem(
          payload, 
          'post', 
          post.title
        );
        
        // Create post with the appropriate image
        const data = {
          ...post,
          heroImage: mediaId || defaultMediaId,
          meta: {
            ...post.meta,
            image: mediaId || defaultMediaId
          }
        };
        
        const createdPost = await payload.create({
          collection: 'posts',
          data: data as any, // Using type assertion as a temporary solution
        });
        console.log(`Created post: ${createdPost.title} with media ID: ${data.heroImage}`);
        
        // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
        progressManager.increment();
      } catch (error) {
        console.error(`Error creating post ${post.title}:`, error);
        progressManager.increment(); // V·∫´n c·∫≠p nh·∫≠t n·∫øu c√≥ l·ªói
      }
    }
    
    // Ho√†n th√†nh progress bar
    progressManager.complete();

    console.log(`‚úÖ Successfully seeded posts`);
  } catch (error) {
    console.error('Error seeding posts:', error);
  }
};
