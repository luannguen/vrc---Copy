import { Payload } from 'payload';

// Import our improved media management utilities
import {
  getImageForCollectionItem,
  getOrCreateDefaultMediaId
} from './utils/seedMediaManagement';

// Import RichText utils with advanced formatting
import { createRichText } from './utils/richTextUtils';

// Import progress bar manager
import { progressManager } from './utils/progressUtils';

export const seedServices = async (payload: Payload) => {
  console.log('üõ†Ô∏è Seeding services...');

  try {
    // Fetch existing services to avoid duplicates
    const existingServices = await payload.find({
      collection: 'services',
      limit: 100,
    });

    // If we already have services, skip
    if (existingServices.docs.length > 0) {
      console.log(`Found ${existingServices.docs.length} existing services, skipping seed.`);
      return;
    }    // Get or create a default media ID for fallback
    const defaultMediaId = await getOrCreateDefaultMediaId(payload);
    console.log('Default media ID for services fallback:', defaultMediaId);    // Sample services based on the frontend data - with rich markdown content
    const services = [
      {
        title: "D·ªãch v·ª• b·∫£o tr√¨ chuy√™n nghi·ªáp",
        summary: "ƒê·ªôi ng≈© k·ªπ thu·∫≠t h√†ng ƒë·∫ßu, ph·ª•c v·ª• 24/7 cho c√°c h·ªá th·ªëng ƒëi·ªán l·∫°nh c√¥ng nghi·ªáp v√† th∆∞∆°ng m·∫°i",        type: "maintenance", // Required field
        featured: true,
        status: "published",
        _status: "published",
        featuredImage: defaultMediaId, // Required field
        content: createRichText(`# D·ªãch v·ª• b·∫£o tr√¨ chuy√™n nghi·ªáp

## D·ªãch v·ª• c·ªßa ch√∫ng t√¥i bao g·ªìm:

1. B·∫£o tr√¨ ƒë·ªãnh k·ª≥ c√°c h·ªá th·ªëng ƒëi·ªÅu h√≤a
2. Ki·ªÉm tra v√† l√†m s·∫°ch thi·∫øt b·ªã
3. Thay th·∫ø ph·ª• t√πng theo ƒë·ªãnh k·ª≥
4. C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm ƒëi·ªÅu khi·ªÉn
5. B√°o c√°o t√¨nh tr·∫°ng v√† ƒë·ªÅ xu·∫•t c·∫£i ti·∫øn

## ƒê·ªôi ng≈© k·ªπ thu·∫≠t
- **K·ªπ s∆∞ l·∫°nh** v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám
- **Nh√¢n vi√™n k·ªπ thu·∫≠t** ƒë∆∞·ª£c ƒë√†o t·∫°o b√†i b·∫£n
- **T∆∞ v·∫•n vi√™n** am hi·ªÉu s·∫£n ph·∫©m v√† nhu c·∫ßu kh√°ch h√†ng

Li√™n h·ªá ngay ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n g√≥i b·∫£o tr√¨ ph√π h·ª£p!`, 'markdown'),
        price: "Theo h·ª£p ƒë·ªìng",
      },
      {
        title: "T∆∞ v·∫•n gi·∫£i ph√°p ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng",
        summary: "Gi·∫£i ph√°p xanh cho t∆∞∆°ng lai b·ªÅn v·ªØng, gi√∫p doanh nghi·ªáp ti·∫øt ki·ªám chi ph√≠",        type: "consulting", // Required field
        featured: true,
        status: "published",
        _status: "published",
        featuredImage: defaultMediaId, // Required field
        content: createRichText(`# T∆∞ v·∫•n gi·∫£i ph√°p ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng

## L·ª£i √≠ch khi s·ª≠ d·ª•ng d·ªãch v·ª•
- Gi·∫£m chi ph√≠ ƒëi·ªán nƒÉng l√™n ƒë·∫øn 30%
- K√©o d√†i tu·ªïi th·ªç thi·∫øt b·ªã
- Gi·∫£m ph√°t th·∫£i carbon
- C·∫£i thi·ªán h√¨nh ·∫£nh doanh nghi·ªáp

## Quy tr√¨nh t∆∞ v·∫•n
1. ƒê√°nh gi√° hi·ªán tr·∫°ng s·ª≠ d·ª•ng nƒÉng l∆∞·ª£ng
2. X√°c ƒë·ªãnh c∆° h·ªôi ti·∫øt ki·ªám
3. ƒê·ªÅ xu·∫•t gi·∫£i ph√°p c·ª• th·ªÉ
4. Ph√¢n t√≠ch chi ph√≠ - l·ª£i √≠ch
5. H·ªó tr·ª£ tri·ªÉn khai
6. ƒê√°nh gi√° hi·ªáu qu·∫£

### C√¥ng ngh·ªá xanh
Ch√∫ng t√¥i √°p d·ª•ng c√°c **c√¥ng ngh·ªá ti√™n ti·∫øn** nh·∫±m t·ªëi ∆∞u h√≥a vi·ªác s·ª≠ d·ª•ng nƒÉng l∆∞·ª£ng trong m·ªçi c√¥ng tr√¨nh.`, 'markdown'),
        price: "Theo d·ª± √°n",
      },
      {
        title: "D·ªãch v·ª• s·ª≠a ch·ªØa kh·∫©n c·∫•p",
        summary: "Kh·∫Øc ph·ª•c s·ª± c·ªë nhanh ch√≥ng, h·ªó tr·ª£ 24/7 cho m·ªçi h·ªá th·ªëng ƒëi·ªán l·∫°nh",        type: "repair", // Required field
        featured: true,
        status: "published",
        _status: "published",
        featuredImage: defaultMediaId, // Required field
        content: createRichText(`# D·ªãch v·ª• s·ª≠a ch·ªØa kh·∫©n c·∫•p

## Th·ªùi gian ph·∫£n h·ªìi
- **Trong gi·ªù h√†nh ch√≠nh:** 30 ph√∫t
- **Ngo√†i gi·ªù h√†nh ch√≠nh:** 60 ph√∫t
- **Ng√†y l·ªÖ, T·∫øt:** 90 ph√∫t

## C√°c s·ª± c·ªë ch√∫ng t√¥i x·ª≠ l√Ω
- H·ªá th·ªëng ng·ª´ng ho·∫°t ƒë·ªông
- R√≤ r·ªâ gas l·∫°nh
- Ti·∫øng ·ªìn b·∫•t th∆∞·ªùng
- Nhi·ªát ƒë·ªô kh√¥ng ·ªïn ƒë·ªãnh
- L·ªói ƒëi·ªán ƒëi·ªÅu khi·ªÉn

## Cam k·∫øt d·ªãch v·ª•
1. **Nhanh ch√≥ng** - C√≥ m·∫∑t s·ªõm nh·∫•t c√≥ th·ªÉ
2. **Chuy√™n nghi·ªáp** - K·ªπ thu·∫≠t vi√™n ƒë∆∞·ª£c ƒë√†o t·∫°o b√†i b·∫£n
3. **Hi·ªáu qu·∫£** - Ph√°t hi·ªán v√† x·ª≠ l√Ω t·∫≠n g·ªëc v·∫•n ƒë·ªÅ
4. **Minh b·∫°ch** - B√°o gi√° tr∆∞·ªõc khi s·ª≠a ch·ªØa

Hotline h·ªó tr·ª£: 1900-xxxx`, 'markdown'),
        price: "Theo gi·ªù",
      },
    ];    // Create services
    // Kh·ªüi t·∫°o progress bar cho vi·ªác t·∫°o d·ªãch v·ª•
    progressManager.initProgressBar(services.length, 'Uploading service images');

    for (const service of services) {
      try {
        // Get appropriate image for this service
        const mediaId = await getImageForCollectionItem(
          payload,
          'service',
          service.title
        );

        // Create service with the appropriate image
        const data = {
          ...service,
          featuredImage: mediaId || defaultMediaId
        };

        const createdService = await payload.create({
          collection: 'services',
          data: data as any, // Using type assertion as a temporary solution
        });
        console.log(`Created service: ${createdService.title} with media ID: ${data.featuredImage}`);

        // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
        progressManager.increment();
      } catch (error) {
        console.error(`Error creating service ${service.title}:`, error);
        progressManager.increment(); // V·∫´n c·∫≠p nh·∫≠t n·∫øu c√≥ l·ªói
      }
    }

    // Ho√†n th√†nh progress bar
    progressManager.complete();

    console.log(`‚úÖ Successfully seeded services`);
  } catch (error) {
    console.error('Error seeding services:', error);
  }
}
