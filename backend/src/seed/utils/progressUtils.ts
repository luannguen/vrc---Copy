/**
 * Ti·ªán √≠ch qu·∫£n l√Ω progress bar cho qu√° tr√¨nh seed data
 * Gi√∫p hi·ªÉn th·ªã tr·ª±c quan ti·∫øn tr√¨nh upload v√† seed
 * C·∫≠p nh·∫≠t ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi m√¥i tr∆∞·ªùng Next.js
 */
import cliProgress from 'cli-progress';
import colors from 'colors';

// Ki·ªÉm tra xem m√¥i tr∆∞·ªùng c√≥ h·ªó tr·ª£ cli-progress hay kh√¥ng
const isSupportedEnvironment = () => {
  try {
    // Trong m·ªôt s·ªë m√¥i tr∆∞·ªùng nh∆∞ Next.js, process.stdout c√≥ th·ªÉ b·ªã ghi ƒë√®
    return process.stdout && typeof process.stdout.cursorTo === 'function';
  } catch (_e) {
    return false;
  }
};

// Singleton ƒë·ªÉ qu·∫£n l√Ω progress bar
class ProgressManager {
  private static instance: ProgressManager;
  private progressBar: cliProgress.SingleBar | null = null;
  private totalItems: number = 0;
  private currentItems: number = 0;
  private activeLabel: string = '';  private isSupported: boolean = isSupportedEnvironment();
  
  private constructor() {
    // Ki·ªÉm tra m√¥i tr∆∞·ªùng khi kh·ªüi t·∫°o
    this.isSupported = isSupportedEnvironment();
  }
  
  public static getInstance(): ProgressManager {
    if (!ProgressManager.instance) {
      ProgressManager.instance = new ProgressManager();
    }
    return ProgressManager.instance;
  }
  
  /**
   * Kh·ªüi t·∫°o progress bar v·ªõi t·ªïng s·ªë item c·∫ßn x·ª≠ l√Ω
   * 
   * @param total T·ªïng s·ªë item ƒë·ªÉ ho√†n th√†nh
   * @param label Nh√£n m√¥ t·∫£ task
   */  public initProgressBar(total: number, label: string = 'Seeding data'): void {
    if (this.progressBar) {
      this.progressBar.stop();
    }
    
    this.totalItems = total;
    this.currentItems = 0;
    this.activeLabel = label;
    
    // Ki·ªÉm tra m√¥i tr∆∞·ªùng tr∆∞·ªõc khi t·∫°o thanh ti·∫øn tr√¨nh
    if (!this.isSupported) {
      console.log(`üöÄ ${label} - B·∫Øt ƒë·∫ßu (${total} items)`);
      return;
    }
    
    try {
      const format = `${colors.cyan(label)} ${colors.yellow('[{bar}]')} ${colors.green('{percentage}%')} | ${colors.magenta('{value}/{total}')} | ${colors.blue('{duration_formatted}')}`;
      
      this.progressBar = new cliProgress.SingleBar({
        format,
        barCompleteChar: '\u2588',
        barIncompleteChar: '\u2591',
        hideCursor: true
      }, cliProgress.Presets.shades_classic);
        this.progressBar.start(total, 0);
    } catch (_error) {
      // Fallback n·∫øu c√≥ l·ªói v·ªõi thanh ti·∫øn tr√¨nh
      console.log(`üöÄ ${label} - B·∫Øt ƒë·∫ßu (${total} items)`);
      this.isSupported = false;
    }
  }
  
  /**
   * C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
   * 
   * @param increment S·ªë item ƒë√£ ho√†n th√†nh th√™m
   */  public increment(increment: number = 1): void {
    this.currentItems += increment;
    
    // N·∫øu kh√¥ng h·ªó tr·ª£ thanh ti·∫øn tr√¨nh, hi·ªÉn th·ªã log th√¥ng th∆∞·ªùng
    if (!this.isSupported || !this.progressBar) {
      console.log(`‚è© ${this.activeLabel} - Ti·∫øn ƒë·ªô: ${this.currentItems}/${this.totalItems}`);
      return;
    }
    
    try {      this.progressBar.update(this.currentItems);
    } catch (_error) {
      // Fallback n·∫øu c√≥ l·ªói
      console.log(`‚è© ${this.activeLabel} - Ti·∫øn ƒë·ªô: ${this.currentItems}/${this.totalItems}`);
      this.isSupported = false;
    }
  }
  
  /**
   * Ho√†n th√†nh v√† ƒë√≥ng progress bar
   */  public complete(): void {
    // N·∫øu kh√¥ng h·ªó tr·ª£ thanh ti·∫øn tr√¨nh, hi·ªÉn th·ªã log th√¥ng th∆∞·ªùng
    if (!this.isSupported || !this.progressBar) {
      console.log(`‚úÖ ${this.activeLabel} - Ho√†n th√†nh! (${this.totalItems}/${this.totalItems})`);
      return;
    }
    
    try {
      this.progressBar.update(this.totalItems);
      this.progressBar.stop();
      this.progressBar = null;    } catch (_error) {
      // Fallback n·∫øu c√≥ l·ªói
      console.log(`‚úÖ ${this.activeLabel} - Ho√†n th√†nh! (${this.totalItems}/${this.totalItems})`);
    }
  }
}

export const progressManager = ProgressManager.getInstance();
