import { Payload } from 'payload';
import fs from 'fs';
import { uploadFileWithCache } from './fileUtils';
import { progressManager } from './progressUtils';

/**
 * Upload event images used in frontend to backend media collection
 */

interface EventImageMapping {
  filename: string;
  frontendPath: string;
  alt: string;
  description: string;
}

// Mapping c·ªßa c√°c ·∫£nh ƒë∆∞·ª£c s·ª≠ d·ª•ng trong frontend Events
export const eventImageMappings: EventImageMapping[] = [
  {
    filename: '0bd3c048-8e37-4775-a6bc-0b54ec07edbe.png',
    frontendPath: 'E:\\Download\\vrc - Copy\\vrcfrontend\\public\\lovable-uploads\\0bd3c048-8e37-4775-a6bc-0b54ec07edbe.png',
    alt: 'Tri·ªÉn l√£m s·ª± ki·ªán VRC',
    description: 'H√¨nh ·∫£nh cho tri·ªÉn l√£m qu·ªëc t·∫ø v√† h·ªôi ngh·ªã kh√°ch h√†ng VRC'
  },
  {
    filename: 'projects-overview.jpg',
    frontendPath: 'E:\\Download\\vrc - Copy\\vrcfrontend\\public\\assets\\images\\projects-overview.jpg',
    alt: 'H·ªôi th·∫£o v√† d·ª± √°n VRC',
    description: 'H√¨nh ·∫£nh cho h·ªôi th·∫£o v√† ra m·∫Øt s·∫£n ph·∫©m'
  },
  {
    filename: 'service-overview.jpg',
    frontendPath: 'E:\\Download\\vrc - Copy\\vrcfrontend\\public\\assets\\images\\service-overview.jpg',
    alt: 'ƒê√†o t·∫°o v√† d·ªãch v·ª• VRC',
    description: 'H√¨nh ·∫£nh cho kh√≥a ƒë√†o t·∫°o v√† di·ªÖn ƒë√†n'
  },
  // Th√™m c√°c ·∫£nh s·ª± ki·ªán c·ª• th·ªÉ t·ª´ frontend
  {
    filename: 'vrc-post-trien-lam-quoc-te-he-thong-lanh-dieu-hoa-2025.jpeg',
    frontendPath: 'E:\\Download\\vrc - Copy\\vrcfrontend\\public\\assets\\images\\vrc-post-trien-lam-quoc-te-he-thong-lanh-dieu-hoa-2025.jpeg',
    alt: 'Tri·ªÉn l√£m Qu·ªëc t·∫ø H·ªá th·ªëng L·∫°nh 2025',
    description: 'H√¨nh ·∫£nh chuy√™n d·ª•ng cho tri·ªÉn l√£m qu·ªëc t·∫ø v·ªÅ h·ªá th·ªëng l·∫°nh v√† ƒëi·ªÅu h√≤a kh√¥ng kh√≠'
  },
  {
    filename: 'vrc-post-hoi-thao-cong-nghe-tiet-kiem-nang-luong.jpeg',
    frontendPath: 'E:\\Download\\vrc - Copy\\vrcfrontend\\public\\assets\\images\\vrc-post-hoi-thao-cong-nghe-tiet-kiem-nang-luong.jpeg',
    alt: 'H·ªôi th·∫£o C√¥ng ngh·ªá Ti·∫øt ki·ªám NƒÉng l∆∞·ª£ng',
    description: 'H√¨nh ·∫£nh cho h·ªôi th·∫£o v·ªÅ c√¥ng ngh·ªá ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng'
  },
  {
    filename: 'vrc-post-khoa-dao-tao-ky-thuat-vien-bao-tri.jpeg',
    frontendPath: 'E:\\Download\\vrc - Copy\\vrcfrontend\\public\\assets\\images\\vrc-post-khoa-dao-tao-ky-thuat-vien-bao-tri.jpeg',
    alt: 'Kh√≥a ƒë√†o t·∫°o K·ªπ thu·∫≠t vi√™n',
    description: 'H√¨nh ·∫£nh cho kh√≥a ƒë√†o t·∫°o k·ªπ thu·∫≠t vi√™n b·∫£o tr√¨'
  },
  {
    filename: 'vrc-post-le-ra-mat-dong-san-pham-dieu-hoa-inverter.jpeg',
    frontendPath: 'E:\\Download\\vrc - Copy\\vrcfrontend\\public\\assets\\images\\vrc-post-le-ra-mat-dong-san-pham-dieu-hoa-inverter.jpeg',
    alt: 'Ra m·∫Øt s·∫£n ph·∫©m ƒêi·ªÅu h√≤a Inverter',
    description: 'H√¨nh ·∫£nh cho l·ªÖ ra m·∫Øt s·∫£n ph·∫©m ƒëi·ªÅu h√≤a Inverter'
  },
  {
    filename: 'vrc-post-dien-dan-doanh-nghiep-dien-lanh-viet-eu.jpeg',
    frontendPath: 'E:\\Download\\vrc - Copy\\vrcfrontend\\public\\assets\\images\\vrc-post-dien-dan-doanh-nghiep-dien-lanh-viet-eu.jpeg',
    alt: 'Di·ªÖn ƒë√†n Doanh nghi·ªáp Vi·ªát-EU',
    description: 'H√¨nh ·∫£nh cho di·ªÖn ƒë√†n doanh nghi·ªáp ƒëi·ªán l·∫°nh Vi·ªát Nam - EU'
  }
];

/**
 * Upload all event images to media collection
 * @param payload Payload instance
 * @returns Object mapping image names to their media IDs
 */
export async function uploadEventImages(payload: Payload): Promise<Record<string, string>> {
  console.log('üñºÔ∏è ƒêang upload ·∫£nh s·ª± ki·ªán...');

  const mediaIds: Record<string, string> = {};
  const totalImages = eventImageMappings.length;

  progressManager.initProgressBar(totalImages, 'Uploading Event Images');
    for (const mapping of eventImageMappings) {
    try {
      // Check if file exists
      if (!fs.existsSync(mapping.frontendPath)) {
        console.warn(`‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i: ${mapping.frontendPath}`);
        progressManager.increment();
        continue;
      }

      // Check if image already uploaded
      const existingMedia = await payload.find({
        collection: 'media',
        where: {
          filename: { equals: mapping.filename }
        },
        limit: 1
      });

      if (existingMedia.docs.length > 0) {
        const existingDoc = existingMedia.docs[0];
        if (existingDoc?.id) {
          mediaIds[mapping.filename] = existingDoc.id;
          console.log(`‚úÖ ·∫¢nh "${mapping.filename}" ƒë√£ t·ªìn t·∫°i (ID: ${existingDoc.id})`);
        }
        progressManager.increment();
        continue;
      }

      // Upload the image
      const mediaId = await uploadFileWithCache(
        payload,
        mapping.frontendPath,
        mapping.alt
      );

      if (mediaId) {
        mediaIds[mapping.filename] = mediaId;
        console.log(`‚úÖ Upload th√†nh c√¥ng: ${mapping.filename} (ID: ${mediaId})`);
      } else {
        console.error(`‚ùå Upload th·∫•t b·∫°i: ${mapping.filename}`);
      }

    } catch (error) {
      console.error(`‚ùå L·ªói upload ${mapping.filename}:`, error);
    }

    progressManager.increment();
  }

  progressManager.complete();

  console.log(`‚úÖ Ho√†n th√†nh upload ${Object.keys(mediaIds).length}/${totalImages} ·∫£nh s·ª± ki·ªán`);
  return mediaIds;
}

/**
 * Get media ID for specific event image
 * @param imageKey Key to identify the image (filename or event type)
 * @param mediaIds Media IDs mapping from uploadEventImages
 * @returns Media ID or fallback ID
 */
export function getEventImageId(imageKey: string, mediaIds: Record<string, string>): string | null {
  // Direct filename lookup
  if (mediaIds[imageKey]) {
    return mediaIds[imageKey];
  }

  // Fallback mappings
  const fallbackMappings: Record<string, string> = {
    'exhibition': 'vrc-post-trien-lam-quoc-te-he-thong-lanh-dieu-hoa-2025.jpeg',
    'workshop': 'vrc-post-hoi-thao-cong-nghe-tiet-kiem-nang-luong.jpeg',
    'training': 'vrc-post-khoa-dao-tao-ky-thuat-vien-bao-tri.jpeg',
    'product-launch': 'vrc-post-le-ra-mat-dong-san-pham-dieu-hoa-inverter.jpeg',
    'forum': 'vrc-post-dien-dan-doanh-nghiep-dien-lanh-viet-eu.jpeg',
    'conference': '0bd3c048-8e37-4775-a6bc-0b54ec07edbe.png',
    'default': 'projects-overview.jpg'
  };
    const fallbackFilename = fallbackMappings[imageKey] || fallbackMappings['default'];
  if (fallbackFilename && mediaIds[fallbackFilename]) {
    return mediaIds[fallbackFilename];
  }

  return Object.values(mediaIds)[0] || null;
}
