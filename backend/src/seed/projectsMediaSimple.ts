import type { Payload } from 'payload'
import { getImageForCollectionItem, getOrCreateDefaultMediaId } from './utils/seedMediaManagement'
import { progressManager } from './utils/progressUtils'

/**
 * Seed projects media - Upload ·∫£nh cho projects t·ª´ frontend theo pattern c·ªßa seed posts
 * S·ª≠ d·ª•ng utility functions c√≥ s·∫µn trong seedMediaManagement.ts
 */
export const seedProjectsMedia = async (payload: Payload) => {
  try {
    console.log('üñºÔ∏è Seeding projects media...')

    // Get default media for fallback
    const defaultMediaId = await getOrCreateDefaultMediaId(payload)
    console.log('Default media ID for projects fallback:', defaultMediaId)

    // Define project types and sample project names
    const projectTypes = [
      { type: 'industrial', samples: ['Nh√† m√°y s·∫£n xu·∫•t ABC', 'Nh√† m√°y ch·∫ø bi·∫øn XYZ', 'Khu c√¥ng nghi·ªáp DEF'] },
      { type: 'commercial', samples: ['Trung t√¢m th∆∞∆°ng m·∫°i ABC', 'T√≤a nh√† vƒÉn ph√≤ng XYZ', 'Kh√°ch s·∫°n DEF'] },
      { type: 'specialized', samples: ['Ph√≤ng s·∫°ch GMP', 'Kho l·∫°nh ƒë√¥ng', 'Ph√≤ng m√°y ch·ªß'] }
    ]

    const results = {
      heroImages: {} as Record<string, string | null>,
      galleryImages: {} as Record<string, string[]>,
      backgroundImage: null as string | null
    }

    // Upload hero background for projects page
    console.log('üì∏ Uploading projects page hero background...')
    results.backgroundImage = await getImageForCollectionItem(
      payload,
      'project',
      'Projects Hero Background'
    ) || defaultMediaId

    // Upload images for each project type
    progressManager.initProgressBar(projectTypes.length * 4, 'Uploading project images')

    for (const projectType of projectTypes) {
      console.log(`üì∏ Processing ${projectType.type} project images...`)

      // Upload hero image for this project type
      const heroImage = await getImageForCollectionItem(
        payload,
        'project',
        `${projectType.type} hero`
      )
      results.heroImages[projectType.type] = heroImage || defaultMediaId
      progressManager.increment()

      // Upload gallery images (multiple per type)
      const galleryImages: string[] = []
      for (let i = 0; i < 3; i++) {
        const galleryImage = await getImageForCollectionItem(
          payload,
          'project',
          `${projectType.type} gallery ${i + 1}`
        )
        if (galleryImage) {
          galleryImages.push(galleryImage)
        }
        progressManager.increment()
      }
      results.galleryImages[projectType.type] = galleryImages

      console.log(`‚úÖ ${projectType.type} project media: hero=${results.heroImages[projectType.type] ? 'uploaded' : 'fallback'}, gallery=${galleryImages.length} images`)
    }

    progressManager.complete()

    console.log('üéâ Projects media seeding completed!')
    console.log('üìä Results:', JSON.stringify(results, null, 2))

    return results
  } catch (error) {
    console.error('‚ùå Error seeding projects media:', error)
    throw error
  }
}
