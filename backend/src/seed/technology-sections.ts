import type { Payload } from 'payload'

export const seedTechnologySections = async (payload: Payload): Promise<void> => {
  try {
    console.log('üå± Starting Technology Sections seed...')

    // Delete existing technology-sections to ensure clean seed
    console.log('üóëÔ∏è Clearing existing technology-sections...')
    const existingDocs = await payload.find({
      collection: 'technology-sections',
      limit: 0, // Get all documents
    })

    if (existingDocs.docs.length > 0) {
      for (const doc of existingDocs.docs) {
        await payload.delete({
          collection: 'technology-sections',
          id: doc.id,
        })
      }
      console.log(`üóëÔ∏è Deleted ${existingDocs.docs.length} existing documents`)
    }

    console.log('üå± Seeding Technology Sections...')

    // Hero Section
    await payload.create({
      collection: 'technology-sections',
      data: {
        title: 'C√¥ng ngh·ªá & Thi·∫øt b·ªã',
        section: 'hero',
        subtitle: '·ª®ng d·ª•ng c√¥ng ngh·ªá hi·ªán ƒë·∫°i v√† c√°c thi·∫øt b·ªã ti√™n ti·∫øn nh·∫•t trong lƒ©nh v·ª±c k·ªπ thu·∫≠t l·∫°nh v√† ƒëi·ªÅu h√≤a kh√¥ng kh√≠.',
        content: {
          root: {
            type: 'root',
            children: [
              {
                type: 'paragraph',
                version: 1,
                children: [
                  {
                    type: 'text',
                    text: 'VRC lu√¥n ƒëi ƒë·∫ßu trong vi·ªác ·ª©ng d·ª•ng c√¥ng ngh·ªá hi·ªán ƒë·∫°i v√† thi·∫øt b·ªã ti√™n ti·∫øn ƒë·ªÉ mang ƒë·∫øn nh·ªØng gi·∫£i ph√°p t·ªëi ∆∞u cho kh√°ch h√†ng.',
                  },
                ],
              },
            ],
            direction: 'ltr' as const,
            format: '',
            indent: 0,
            version: 1,
          },
        },
        ctaButtons: [
          {
            text: 'T∆∞ v·∫•n gi·∫£i ph√°p c√¥ng ngh·ªá',
            link: '/contact',
            variant: 'default',
          },
        ],
        backgroundColor: 'primary',
        order: 1,
        _status: 'published',
      },
    })
    console.log('‚úÖ Created Hero section successfully')

    // Technology Overview Section
    console.log('üìù Creating Technology Overview section...')
    await payload.create({
      collection: 'technology-sections',
      data: {
        title: 'C√¥ng ngh·ªá ti√™n ti·∫øn',
        section: 'overview',
        subtitle: 'VRC lu√¥n ƒëi ƒë·∫ßu trong vi·ªác ·ª©ng d·ª•ng c√°c c√¥ng ngh·ªá ti√™n ti·∫øn nh·∫•t trong lƒ©nh v·ª±c k·ªπ thu·∫≠t l·∫°nh v√† ƒëi·ªÅu h√≤a kh√¥ng kh√≠.',
        content: {
          root: {
            type: 'root',
            children: [              {
                type: 'paragraph',
                version: 1,
                children: [
                  {
                    type: 'text',
                    text: 'Ch√∫ng t√¥i kh√¥ng ng·ª´ng nghi√™n c·ª©u v√† ph√°t tri·ªÉn ƒë·ªÉ mang ƒë·∫øn nh·ªØng gi·∫£i ph√°p hi·ªáu qu·∫£, ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng v√† th√¢n thi·ªán v·ªõi m√¥i tr∆∞·ªùng.',
                  },
                ],
              },
            ],
            direction: 'ltr' as const,
            format: '',
            indent: 0,
            version: 1,
          },
        },
        features: [
          {
            title: 'Ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng',
            description: 'C√¥ng ngh·ªá ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng ƒë·∫°t chu·∫©n qu·ªëc t·∫ø',
            icon: 'CheckCircle',
          },
          {
            title: 'IoT & Smart Control',
            description: 'T√≠ch h·ª£p IoT v√† h·ªá th·ªëng qu·∫£n l√Ω th√¥ng minh',
            icon: 'CheckCircle',
          },
          {
            title: 'Th√¢n thi·ªán m√¥i tr∆∞·ªùng',
            description: 'Gi·∫£i ph√°p th√¢n thi·ªán v·ªõi m√¥i tr∆∞·ªùng, gi·∫£m ph√°t th·∫£i carbon',
            icon: 'CheckCircle',
          },
          {
            title: 'Gi√°m s√°t t·ª´ xa',
            description: 'H·ªá th·ªëng gi√°m s√°t v√† ƒëi·ªÅu khi·ªÉn t·ª´ xa hi·ªán ƒë·∫°i',
            icon: 'CheckCircle',
          },
        ],
        backgroundColor: 'white',
        order: 2,
        _status: 'published',
      },
    })

    // Equipment Categories Section
    await payload.create({
      collection: 'technology-sections',
      data: {
        title: 'Danh m·ª•c thi·∫øt b·ªã',
        section: 'equipment-categories',
        subtitle: 'C√°c lo·∫°i thi·∫øt b·ªã chuy√™n d·ª•ng ƒë∆∞·ª£c VRC cung c·∫•p v√† l·∫Øp ƒë·∫∑t',
        equipmentItems: [
          {
            category: 'Thi·∫øt b·ªã l√†m l·∫°nh c√¥ng nghi·ªáp',
            items: [
              { name: 'H·ªá th·ªëng l√†m l·∫°nh n∆∞·ªõc' },
              { name: 'Th√°p gi·∫£i nhi·ªát' },
              { name: 'M√°y l√†m l·∫°nh Chiller' },
              { name: 'B·ªô trao ƒë·ªïi nhi·ªát' },
            ],
          },
          {
            category: 'Thi·∫øt b·ªã ƒëi·ªÅu h√≤a kh√¥ng kh√≠',
            items: [
              { name: 'H·ªá th·ªëng VRF/VRV' },
              { name: 'ƒêi·ªÅu h√≤a trung t√¢m' },
              { name: 'AHU v√† FCU' },
              { name: 'ƒêi·ªÅu h√≤a kh√¥ng kh√≠ ch√≠nh x√°c' },
            ],
          },
          {
            category: 'Thi·∫øt b·ªã l·∫°nh th∆∞∆°ng m·∫°i',
            items: [
              { name: 'T·ªß ƒë√¥ng c√¥ng nghi·ªáp' },
              { name: 'T·ªß m√°t si√™u th·ªã' },
              { name: 'Kho l·∫°nh' },
              { name: 'Qu·∫ßy tr∆∞ng b√†y l·∫°nh' },
            ],
          },
          {
            category: 'Thi·∫øt b·ªã ph·ª• tr·ª£',
            items: [
              { name: 'H·ªá th·ªëng ·ªëng ƒë·ªìng' },
              { name: 'Van ƒëi·ªÅu khi·ªÉn' },
              { name: 'C·∫£m bi·∫øn nhi·ªát ƒë·ªô' },
              { name: 'Thi·∫øt b·ªã ki·ªÉm so√°t ƒë·ªô ·∫©m' },
            ],
          },
        ],
        backgroundColor: 'white',
        order: 3,
        _status: 'published',
      },
    })

    // Partners Section
    await payload.create({
      collection: 'technology-sections',
      data: {
        title: 'ƒê·ªëi t√°c c√¥ng ngh·ªá',
        section: 'partners',
        subtitle: 'Ch√∫ng t√¥i h·ª£p t√°c v·ªõi c√°c th∆∞∆°ng hi·ªáu h√†ng ƒë·∫ßu th·∫ø gi·ªõi ƒë·ªÉ mang ƒë·∫øn nh·ªØng gi·∫£i ph√°p c√¥ng ngh·ªá t·ªët nh·∫•t.',        partnerLogos: [
          // Logo s·∫Ω ƒë∆∞·ª£c th√™m sau khi c√≥ media files
          // T·∫°m th·ªùi ƒë·ªÉ tr·ªëng ƒë·ªÉ tr√°nh l·ªói required
        ],
        backgroundColor: 'muted',
        order: 4,
        _status: 'published',
      },
    })

    // CTA Section
    await payload.create({
      collection: 'technology-sections',
      data: {
        title: 'T√¨m hi·ªÉu gi·∫£i ph√°p c√¥ng ngh·ªá ph√π h·ª£p',
        section: 'cta',
        subtitle: 'H√£y li√™n h·ªá v·ªõi ch√∫ng t√¥i ngay h√¥m nay ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ c√°c gi·∫£i ph√°p c√¥ng ngh·ªá v√† thi·∫øt b·ªã ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa doanh nghi·ªáp b·∫°n.',
        ctaButtons: [
          {
            text: 'Li√™n h·ªá t∆∞ v·∫•n',
            link: '/contact',
            variant: 'default',
          },
          {
            text: 'Xem d·ª± √°n th·ª±c t·∫ø',
            link: '/projects',
            variant: 'outline',
          },
        ],
        backgroundColor: 'accent',
        order: 5,
        _status: 'published',
      },
    })

    console.log('‚úÖ Technology Sections seeded successfully!')
  } catch (error) {
    console.error('‚ùå Error seeding Technology Sections:', error)
    throw error
  }
}
