import { Payload } from 'payload';

// Import our improved media management utilities
import { 
  getImageForCollectionItem,
  getOrCreateDefaultMediaId 
} from './utils/seedMediaManagement';

// Import RichText utils with advanced formatting
import { createRichText } from './utils/richTextUtils';

// Import progress bar manager
import { progressManager } from './utils/progressUtils';

export const seedProducts = async (payload: Payload) => {
  console.log('üì¶ Seeding products...');

  try {
    // Fetch existing products to avoid duplicates
    const existingProducts = await payload.find({
      collection: 'products',
      limit: 100,
    });

    // If we already have products, skip
    if (existingProducts.docs.length > 0) {
      console.log(`Found ${existingProducts.docs.length} existing products, skipping seed.`);
      return;
    }// Get or create a default media ID for fallback
    const defaultMediaId = await getOrCreateDefaultMediaId(payload);
    console.log('Default media ID for products fallback:', defaultMediaId);    // Sample products based on the frontend data - with enhanced markdown descriptions
    const products = [
      {
        name: "ƒêi·ªÅu h√≤a c√¥ng nghi·ªáp VRC-5000",
        excerpt: "H·ªá th·ªëng ƒëi·ªÅu h√≤a c√¥ng nghi·ªáp c√¥ng su·∫•t l·ªõn, ph√π h·ª£p cho nh√† x∆∞·ªüng, nh√† m√°y s·∫£n xu·∫•t",
        description: createRichText(`# ƒêi·ªÅu h√≤a c√¥ng nghi·ªáp VRC-5000

## T√≠nh nƒÉng n·ªïi b·∫≠t
- C√¥ng su·∫•t l·ªõn, ph√π h·ª£p kh√¥ng gian r·ªông
- Ti·∫øt ki·ªám ƒëi·ªán v·ªõi c√¥ng ngh·ªá Inverter
- Ho·∫°t ƒë·ªông √™m √°i, b·ªÅn b·ªâ
- B·∫£o h√†nh 5 nƒÉm

## Th√¥ng s·ªë k·ªπ thu·∫≠t
1. C√¥ng su·∫•t: 50.000 BTU
2. ƒêi·ªán √°p: 380V
3. Kh·∫£ nƒÉng l√†m m√°t: 150m¬≤`, 'markdown'),
        category: "industrial",
        featured: true,
        status: "published",
        mainImage: defaultMediaId,
        price: "Li√™n h·ªá",
      },
      {
        name: "Kho l·∫°nh b·∫£o qu·∫£n VRC-KL500",
        excerpt: "Kho l·∫°nh c√¥ng nghi·ªáp l·∫Øp ƒë·∫∑t nhanh ch√≥ng, b·∫£o qu·∫£n th·ª±c ph·∫©m, d∆∞·ª£c ph·∫©m v·ªõi nhi·ªát ƒë·ªô ·ªïn ƒë·ªãnh",
        description: createRichText(`# Kho l·∫°nh b·∫£o qu·∫£n VRC-KL500

## ƒê·∫∑c ƒëi·ªÉm s·∫£n ph·∫©m
- Dung t√≠ch l·ªõn, ph√π h·ª£p cho nh√† m√°y, c∆° s·ªü s·∫£n xu·∫•t
- Nhi·ªát ƒë·ªô ·ªïn ƒë·ªãnh t·ª´ -20¬∞C ƒë·∫øn +10¬∞C
- C·∫•u tr√∫c panel c√°ch nhi·ªát hi·ªáu qu·∫£
- H·ªá th·ªëng ki·ªÉm so√°t ƒë·ªô ·∫©m th√¥ng minh

## ·ª®ng d·ª•ng
- B·∫£o qu·∫£n th·ª±c ph·∫©m
- B·∫£o qu·∫£n d∆∞·ª£c ph·∫©m
- B·∫£o qu·∫£n m·∫´u sinh h·ªçc
- L∆∞u tr·ªØ v·∫≠t li·ªáu ƒë·∫∑c bi·ªát`, 'markdown'),
        category: "cold-storage",
        featured: true,
        status: "published",
        mainImage: defaultMediaId,
        price: "Li√™n h·ªá",
      },
      {
        name: "H·ªá th·ªëng l·∫°nh th∆∞∆°ng m·∫°i VRC-CS200",
        excerpt: "Thi·∫øt b·ªã l√†m l·∫°nh cho si√™u th·ªã, nh√† h√†ng v√† c·ª≠a h√†ng b√°n l·∫ª",
        description: createRichText(`# H·ªá th·ªëng l·∫°nh th∆∞∆°ng m·∫°i VRC-CS200

## ∆Øu ƒëi·ªÉm s·∫£n ph·∫©m
- Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, ph√π h·ª£p kh√¥ng gian th∆∞∆°ng m·∫°i
- ƒêi·ªÅu ch·ªânh nhi·ªát ƒë·ªô linh ho·∫°t
- Ti·∫øt ki·ªám ƒëi·ªán nƒÉng
- B·∫£o h√†nh d√†i h·∫°n

## Ph√π h·ª£p v·ªõi
1. Si√™u th·ªã mini
2. Nh√† h√†ng
3. C·ª≠a h√†ng ti·ªán l·ª£i
4. Qu·∫ßy bar

## C√¥ng ngh·ªá
**C√¥ng ngh·ªá Inverter** gi√∫p ti·∫øt ki·ªám ƒëi·ªán nƒÉng hi·ªáu qu·∫£.`, 'markdown'),
        category: "commercial",
        featured: true,
        status: "published",
        mainImage: defaultMediaId,
        price: "Li√™n h·ªá",
      },
    ];    // Create products
    // Kh·ªüi t·∫°o progress bar cho vi·ªác upload h√¨nh ·∫£nh s·∫£n ph·∫©m
    progressManager.initProgressBar(products.length, 'Uploading product images');
    
    for (const product of products) {
      try {
        // Get appropriate image for this product
        const mediaId = await getImageForCollectionItem(
          payload, 
          'product', 
          product.name
        );
        
        // Create product with the appropriate image
        const data = {
          ...product,
          mainImage: mediaId || defaultMediaId
        };
        
        const createdProduct = await payload.create({
          collection: 'products',
          data: data as any, // Using type assertion as a temporary solution
        });
        console.log(`Created product: ${createdProduct.name} with media ID: ${data.mainImage}`);
        
        // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
        progressManager.increment();
      } catch (error) {
        console.error(`Error creating product ${product.name}:`, error);
        progressManager.increment(); // V·∫´n c·∫≠p nh·∫≠t n·∫øu c√≥ l·ªói
      }
    }
    
    // Ho√†n th√†nh progress bar
    progressManager.complete();

    console.log(`‚úÖ Successfully seeded products`);
  } catch (error) {
    console.error('Error seeding products:', error);
  }
}
