"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.progressManager = void 0;
/**
 * Ti·ªán √≠ch qu·∫£n l√Ω progress bar cho qu√° tr√¨nh seed data
 * Gi√∫p hi·ªÉn th·ªã tr·ª±c quan ti·∫øn tr√¨nh upload v√† seed
 * C·∫≠p nh·∫≠t ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi m√¥i tr∆∞·ªùng Next.js
 */
const cli_progress_1 = __importDefault(require("cli-progress"));
const colors_1 = __importDefault(require("colors"));
// Ki·ªÉm tra xem m√¥i tr∆∞·ªùng c√≥ h·ªó tr·ª£ cli-progress hay kh√¥ng
const isSupportedEnvironment = () => {
    try {
        // Trong m·ªôt s·ªë m√¥i tr∆∞·ªùng nh∆∞ Next.js, process.stdout c√≥ th·ªÉ b·ªã ghi ƒë√®
        return process.stdout && typeof process.stdout.cursorTo === 'function';
    }
    catch (_e) {
        return false;
    }
};
// Singleton ƒë·ªÉ qu·∫£n l√Ω progress bar
class ProgressManager {
    constructor() {
        this.progressBar = null;
        this.totalItems = 0;
        this.currentItems = 0;
        this.activeLabel = '';
        this.isSupported = isSupportedEnvironment();
        // Ki·ªÉm tra m√¥i tr∆∞·ªùng khi kh·ªüi t·∫°o
        this.isSupported = isSupportedEnvironment();
    }
    static getInstance() {
        if (!ProgressManager.instance) {
            ProgressManager.instance = new ProgressManager();
        }
        return ProgressManager.instance;
    }
    /**
     * Kh·ªüi t·∫°o progress bar v·ªõi t·ªïng s·ªë item c·∫ßn x·ª≠ l√Ω
     *
     * @param total T·ªïng s·ªë item ƒë·ªÉ ho√†n th√†nh
     * @param label Nh√£n m√¥ t·∫£ task
     */ initProgressBar(total, label = 'Seeding data') {
        if (this.progressBar) {
            this.progressBar.stop();
        }
        this.totalItems = total;
        this.currentItems = 0;
        this.activeLabel = label;
        // Ki·ªÉm tra m√¥i tr∆∞·ªùng tr∆∞·ªõc khi t·∫°o thanh ti·∫øn tr√¨nh
        if (!this.isSupported) {
            console.log(`üöÄ ${label} - B·∫Øt ƒë·∫ßu (${total} items)`);
            return;
        }
        try {
            const format = `${colors_1.default.cyan(label)} ${colors_1.default.yellow('[{bar}]')} ${colors_1.default.green('{percentage}%')} | ${colors_1.default.magenta('{value}/{total}')} | ${colors_1.default.blue('{duration_formatted}')}`;
            this.progressBar = new cli_progress_1.default.SingleBar({
                format,
                barCompleteChar: '\u2588',
                barIncompleteChar: '\u2591',
                hideCursor: true
            }, cli_progress_1.default.Presets.shades_classic);
            this.progressBar.start(total, 0);
        }
        catch (_error) {
            // Fallback n·∫øu c√≥ l·ªói v·ªõi thanh ti·∫øn tr√¨nh
            console.log(`üöÄ ${label} - B·∫Øt ƒë·∫ßu (${total} items)`);
            this.isSupported = false;
        }
    }
    /**
     * C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
     *
     * @param increment S·ªë item ƒë√£ ho√†n th√†nh th√™m
     */ increment(increment = 1) {
        this.currentItems += increment;
        // N·∫øu kh√¥ng h·ªó tr·ª£ thanh ti·∫øn tr√¨nh, hi·ªÉn th·ªã log th√¥ng th∆∞·ªùng
        if (!this.isSupported || !this.progressBar) {
            console.log(`‚è© ${this.activeLabel} - Ti·∫øn ƒë·ªô: ${this.currentItems}/${this.totalItems}`);
            return;
        }
        try {
            this.progressBar.update(this.currentItems);
        }
        catch (_error) {
            // Fallback n·∫øu c√≥ l·ªói
            console.log(`‚è© ${this.activeLabel} - Ti·∫øn ƒë·ªô: ${this.currentItems}/${this.totalItems}`);
            this.isSupported = false;
        }
    }
    /**
     * Ho√†n th√†nh v√† ƒë√≥ng progress bar
     */ complete() {
        // N·∫øu kh√¥ng h·ªó tr·ª£ thanh ti·∫øn tr√¨nh, hi·ªÉn th·ªã log th√¥ng th∆∞·ªùng
        if (!this.isSupported || !this.progressBar) {
            console.log(`‚úÖ ${this.activeLabel} - Ho√†n th√†nh! (${this.totalItems}/${this.totalItems})`);
            return;
        }
        try {
            this.progressBar.update(this.totalItems);
            this.progressBar.stop();
            this.progressBar = null;
        }
        catch (_error) {
            // Fallback n·∫øu c√≥ l·ªói
            console.log(`‚úÖ ${this.activeLabel} - Ho√†n th√†nh! (${this.totalItems}/${this.totalItems})`);
        }
    }
}
exports.progressManager = ProgressManager.getInstance();
